diff --git a/drivers/spi/Kconfig b/drivers/spi/Kconfig
index b799547..54581e7 100644
--- a/drivers/spi/Kconfig
+++ b/drivers/spi/Kconfig
@@ -719,6 +719,12 @@ config SPI_ZYNQMP_GQSPI
 	help
 	  Enables Xilinx GQSPI controller driver for Zynq UltraScale+ MPSoC.
 
+config SPI_CENTEC_QSPI
+        tristate "CENTEC QSPI controller"
+        depends on SPI_MASTER 
+        help
+          Enables CENTEC QSPI controller driver.
+
 #
 # Add new SPI master controllers in alphabetical order above this line
 #
diff --git a/drivers/spi/Makefile b/drivers/spi/Makefile
index aa939d9..b05505d 100644
--- a/drivers/spi/Makefile
+++ b/drivers/spi/Makefile
@@ -102,3 +102,4 @@ obj-$(CONFIG_SPI_XILINX)		+= spi-xilinx.o
 obj-$(CONFIG_SPI_XLP)			+= spi-xlp.o
 obj-$(CONFIG_SPI_XTENSA_XTFPGA)		+= spi-xtensa-xtfpga.o
 obj-$(CONFIG_SPI_ZYNQMP_GQSPI)		+= spi-zynqmp-gqspi.o
+obj-$(CONFIG_SPI_CENTEC_QSPI)           += spi-ctc-qspi.o
diff --git a/drivers/spi/spi-ctc-qspi.c b/drivers/spi/spi-ctc-qspi.c
new file mode 100644
index 0000000..a9da3c4
--- /dev/null
+++ b/drivers/spi/spi-ctc-qspi.c
@@ -0,0 +1,666 @@
+/*
+ * Centec QSPI controller driver
+ *
+ * Author: wangyb <wangyb@centecnetworks.com>
+ *
+ * Copyright 2005-2018, Centec Networks (Suzhou) Co., Ltd.
+ *
+ */
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/dma-mapping.h>
+#include <linux/dmaengine.h>
+#include <linux/omap-dma.h>
+#include <linux/platform_device.h>
+#include <linux/err.h>
+#include <linux/clk.h>
+#include <linux/io.h>
+#include <linux/slab.h>
+#include <linux/pm_runtime.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/mfd/syscon.h>
+#include <linux/regmap.h>
+#include <linux/spi/spi.h>
+#include <linux/printk.h>
+
+#define SPI_MODE            0x00
+
+#define PIO_MODE_1          0x01
+#define PIO_MODE_2          0x02
+
+#define PIO_BASE(NR)        (0x20*(NR-1))
+#define PIO_GO(NR)          (0x10 + PIO_BASE(NR))
+#define PIO_CTRL(NR)        (0x14 + PIO_BASE(NR))
+#define PIO_STEP0_CONF(NR)  (0x20 + PIO_BASE(NR))
+#define PIO_STEP1_CONF(NR)  (0x24 + PIO_BASE(NR))
+#define PIO_STEP2_CONF(NR)  (0x28 + PIO_BASE(NR))
+#define PIO_STEP3_CONF(NR)  (0x2c + PIO_BASE(NR))
+
+#define PP_GO               0x80
+#define PP_CTRL             0x84
+#define PP_CMD_CODE         0x90
+#define PP_CMD_CONF         0x94
+#define PP_ADDR_CODE        0x98
+#define PP_ADDR_CONF        0X9c
+#define PP_DUMMY_CODE       0xa0
+#define PP_DUMMY_CONF       0xa4
+#define PP_DATA_CONF        0xa8
+
+#define CTRL_IDLE_CYCLE(V)      (((V)&3)<<24)       
+#define CTRL_PRE_CYCLE(V)       (((V)&3)<<22)
+#define CTRL_POST_CYCLE(V)      (((V)&3)<<20)
+#define CTRL_SCLK_DEFAULT(V)    (((V)&1)<<19) 
+#define CTRL_SOUT3_DEFAULT(V)   (((V)&1)<<18)
+#define CTRL_SOUT2_DEFAULT(V)   (((V)&1)<<17)
+#define CTRL_SOUT1_DEFAULT(V)   (((V)&1)<<16)
+#define CTRL_CS(V)              (((V)&0xff)<<8)
+#define CTRL_DIV_SCLK(V)        (((V)&0xff)<<0)
+
+#define CTC_QSPI_TX_BUFF         0x100
+#define CTC_QSPI_RX_BUFF         0x180
+
+#define CTC_QSPI_RX_BUFFER_SIZE		128
+#define CTC_QSPI_TX_BUFFER_SIZE		128
+
+#define SPINOR_OP_PP		0x02	/* Page program (up to 256 bytes) */
+#define SPINOR_OP_PP_4B	0x12	/* 4-byte PP cmd to Page program (up to 256 bytes) */
+
+#define TIMEOUT_COUNT 65535
+
+#define SPI_INT_EN 0x04
+#define SPI_INT_STATUS 0x0c
+
+#define MAX_SPEED_HZ  25000000
+
+struct ctc_qspi {
+	void	__iomem *regs;
+	u32	speed_hz;
+	u32 	bus_clk;
+	u32 	num_chipselect;
+	u32 	idlecycle;
+	u32 	precycle;
+	u32 	postcycle;
+   	u32 	sout1def;
+    	u32 	sout2def;
+    	u32 	sout3def;
+    	u32 	qspi_mode;
+	u32	clkdiv;	
+	u32	sclkdef;
+	u32	cs_select;
+	u32 	bytes_to_transfer;
+	u8	step;
+	u32 tx_entry;
+};
+
+enum ctc_qspi_mode {
+	PIO_MODE1=1,
+	PIO_MODE2,
+	PP_MODE,
+	BOOT_MODE,
+	XIP_MODE,
+	MODE_MAX
+};
+
+enum type_mode {
+	TYPE_PP=1,
+	TYPE_PIO_READ,
+	TYPE_PIO_WRITE,
+	TYPE_MAX
+};
+
+static int ctc_reg_read(struct ctc_qspi *ctc_qspi, u32 reg, u32* value)
+{
+	*value = readl(ctc_qspi->regs + reg);
+	return *value;
+}
+
+static int ctc_reg_write(struct ctc_qspi *ctc_qspi, u32 reg, u32 value)
+{	
+    	writel(value, ctc_qspi->regs + reg);
+		
+	return 0;
+}
+
+static int ctc_reg_write_mask(struct ctc_qspi *ctc_qspi, u32 reg, u32 value, u32 mask)
+{
+	u32 temp;
+	u32 temp2;
+    
+    	ctc_reg_read(ctc_qspi, reg, &temp);
+
+    	temp &= ~mask;
+    	temp |= value;
+	
+    	ctc_reg_write(ctc_qspi, reg, temp);
+
+	return 0;
+}
+
+static int ctc_qspi_setup(struct spi_device *spi)
+{
+	struct ctc_qspi	*ctc_qspi = spi_master_get_devdata(spi->master);
+	
+	if (spi->master->busy)
+		return -EBUSY;	
+	
+	ctc_qspi->sout1def = 1;
+	ctc_qspi->sout2def = 1;
+	ctc_qspi->sout3def = 1;
+
+	if(spi->max_speed_hz > MAX_SPEED_HZ){
+		dev_err(&spi->dev, "The max_speed_hz can't be more then 25Mhz, using default speed 25Mhz!");
+		ctc_qspi->clkdiv = (ctc_qspi->bus_clk /(MAX_SPEED_HZ * 2));
+	}else{
+		ctc_qspi->speed_hz = spi->max_speed_hz;
+		ctc_qspi->clkdiv = (ctc_qspi->bus_clk /(ctc_qspi->speed_hz * 2));
+	}
+
+	if ((spi->mode & 0x3) == SPI_MODE_0)
+		ctc_qspi->sclkdef =0;
+	else if ((spi->mode & 0x3) == SPI_MODE_3)
+		ctc_qspi->sclkdef =1;
+	else
+		ctc_qspi->sclkdef =1;
+	return 0;
+}
+
+static int ctc_write_tx_buf(struct ctc_qspi *ctc_qspi, u8 offset, u32 value)
+{
+    	writel(value, ctc_qspi->regs + CTC_QSPI_TX_BUFF + offset);
+    
+    	return 0;
+}
+
+static void ctc_fill_tx_buf(struct ctc_qspi *ctc_qspi, u16* offset, u8* buf, u32 len)
+{
+
+	int i = 0;
+	u8 off = *offset;
+
+	while(i < len){
+		if(buf && (buf+i)){
+            		ctc_qspi->tx_entry |= buf[i]<<(off % 4)*8;			
+        	}
+
+		if (off % 4 == 0){
+			ctc_write_tx_buf(ctc_qspi, off, ctc_qspi->tx_entry);
+			ctc_qspi->tx_entry = 0;
+		}
+		i ++;
+		off --;
+	}
+	
+	*offset = off;
+
+}
+
+static void ctc_fill_pp_buf(struct ctc_qspi *ctc_qspi, u32* offset,u8 *buf, u32 len)
+{
+	u32 i = 0, j = 0;
+	u32 off = *offset;
+
+	while (i < len){
+		for (j = 0; j < 4; j++){
+			if (buf && (buf + i)){
+				ctc_qspi->tx_entry |= buf[i + j] << (j % 4) * 8;
+			}						
+		}
+		ctc_write_tx_buf(ctc_qspi, off, ctc_qspi->tx_entry);
+		ctc_qspi->tx_entry = 0;
+		
+		i = i + 4;		
+		off += 4;
+	}
+	*offset = off;
+}
+	
+static void ctc_stepx_conf_init(struct ctc_qspi *ctc_qspi)
+{
+	ctc_qspi->step = 0;
+	
+	ctc_reg_write_mask(ctc_qspi, PIO_STEP0_CONF(ctc_qspi->qspi_mode), 0, 0xffffffff);
+	ctc_reg_write_mask(ctc_qspi, PIO_STEP1_CONF(ctc_qspi->qspi_mode), 0, 0xffffffff);
+	ctc_reg_write_mask(ctc_qspi, PIO_STEP2_CONF(ctc_qspi->qspi_mode), 0, 0xffffffff);
+	ctc_reg_write_mask(ctc_qspi, PIO_STEP3_CONF(ctc_qspi->qspi_mode), 0, 0xffffffff);
+}
+
+static void ctc_stepx_conf(struct ctc_qspi *ctc_qspi, u8 lanes, u32 bytes)
+{
+	u32 cycle =0;
+	u32 stepx_conf_w = 0;
+	u32 stepx_conf_r = 0;
+
+	if (bytes <= 0)
+		return;
+	
+	cycle = (bytes * 8) /lanes;
+	
+	if (lanes == 1){
+		stepx_conf_w = (0xd << 20) | (lanes << 16) | (cycle);
+		stepx_conf_r = (0xd << 20) | (lanes << 16) | (cycle);	
+	}else if (lanes == 2){
+		stepx_conf_w = (0x3 << 20) | (lanes << 16) | (cycle);
+       	stepx_conf_r = (0xc << 20) | (lanes << 16) | (cycle);
+	}else if (lanes == 4){
+		stepx_conf_w = (0xf << 20) | (lanes << 16) | (cycle);
+      		stepx_conf_r = (0x0 << 20) | (lanes << 16) | (cycle);
+	}
+
+	if (ctc_qspi->step == 0){
+		ctc_reg_write_mask(ctc_qspi, PIO_STEP0_CONF(ctc_qspi->qspi_mode), stepx_conf_w, 0xffffffff);
+		ctc_qspi->step ++;
+	}else if (ctc_qspi->step == 1){
+		ctc_reg_write_mask(ctc_qspi, PIO_STEP1_CONF(ctc_qspi->qspi_mode), stepx_conf_r, 0xffffffff);	
+		ctc_qspi->step ++;
+	}
+	
+}
+
+static void ctc_select_qspi_mode(struct ctc_qspi *ctc_qspi, u32 qspi_mode)
+{
+	if ((qspi_mode == PIO_MODE1) || (qspi_mode == PIO_MODE2)){
+		ctc_reg_write_mask(ctc_qspi, SPI_MODE,  ctc_qspi->qspi_mode, 0xffffffff);
+	}
+	else if (qspi_mode == PP_MODE){
+		ctc_reg_write_mask(ctc_qspi, SPI_MODE,  0x100, 0xffffffff);
+	}
+}
+
+static void ctc_qspi_pio_ctrl(struct ctc_qspi *ctc_qspi)
+{
+	u32 ctrl = 0;
+	
+	ctrl = CTRL_IDLE_CYCLE(ctc_qspi->idlecycle) | CTRL_PRE_CYCLE(ctc_qspi->precycle)
+            | CTRL_POST_CYCLE(ctc_qspi->postcycle) | CTRL_SCLK_DEFAULT(ctc_qspi->sclkdef)
+            | CTRL_SOUT3_DEFAULT(ctc_qspi->sout3def) | CTRL_SOUT2_DEFAULT(ctc_qspi->sout2def) 
+            | CTRL_SOUT1_DEFAULT(ctc_qspi->sout1def) | CTRL_CS(ctc_qspi->cs_select) 
+            | CTRL_DIV_SCLK(ctc_qspi->clkdiv);
+
+	ctc_reg_write_mask(ctc_qspi,  PIO_CTRL(ctc_qspi->qspi_mode), ctrl, 0xffffffff);
+}
+
+static void ctc_qspi_pp_ctrl(struct ctc_qspi *ctc_qspi)
+{
+	u32 ctrl = 0;
+	
+	ctrl = CTRL_IDLE_CYCLE(ctc_qspi->idlecycle) | CTRL_PRE_CYCLE(ctc_qspi->precycle)
+            | CTRL_POST_CYCLE(ctc_qspi->postcycle) | CTRL_SCLK_DEFAULT(ctc_qspi->sclkdef)
+            | CTRL_SOUT3_DEFAULT(ctc_qspi->sout3def) | CTRL_SOUT2_DEFAULT(ctc_qspi->sout2def) 
+            | CTRL_SOUT1_DEFAULT(ctc_qspi->sout1def) | CTRL_CS(ctc_qspi->cs_select) 
+            | CTRL_DIV_SCLK(ctc_qspi->clkdiv);
+
+	ctc_reg_write_mask(ctc_qspi, PP_CTRL, ctrl, 0xffffffff);
+}
+
+static u32 ctc_pp_conf(u8 lanes, u32 len)
+{
+	u32 cycle=0;
+	
+	cycle = (len*8)/lanes;
+
+	return (lanes << 16) | (cycle);
+}
+
+static int ctc_read_rx_buf(struct ctc_qspi *ctc_qspi, u8 offset, u8* value)
+{	
+    	*value = readb(ctc_qspi->regs + CTC_QSPI_RX_BUFF + offset);
+
+	return 0;
+}
+
+static void ctc_extra_rx_buf(struct ctc_qspi *ctc_qspi, u16 offset, u8* buf, u16 len)
+{
+	int i = 0;
+    	while(i < len)
+    	{
+        	ctc_read_rx_buf(ctc_qspi, offset, &buf[i++]);
+        	offset--;
+    	}
+}
+
+static int ctc_transfer_for_PP_mode(struct ctc_qspi *ctc_qspi, struct spi_message *msg)
+{
+	struct spi_transfer * t;
+	u32 count;
+	u32 address = 0;
+	u8   lanes[2] = {0};
+	u32	len[2] = {0};
+	u8 * data_tx_buf = NULL;
+	u32 pp_conf;
+	u32 timeout = 0;
+	u32 temp;
+	u32 msg_len;
+	u32 offset;
+	
+	count =0;
+	list_for_each_entry(t, &msg->transfers, transfer_list){
+		if ((count == 0) && (t->tx_buf)){
+			len[0] = t->len;
+			lanes[0] = 1;
+		/*  len[0] = 1 cmd + 3 bytes address */
+			if(len[0] == 4){
+				address |= ((u8 *)t->tx_buf)[1] << 16;
+				address |= ((u8 *)t->tx_buf)[2] << 8;
+				address |= ((u8 *)t->tx_buf)[3];
+			}
+		/*  len[0] = 1 cmd + 4 bytes address */
+			else if(len[0] == 5){
+				address |= ((u8 *)t->tx_buf)[1] << 24;
+				address |= ((u8 *)t->tx_buf)[2] << 16;
+				address |= ((u8 *)t->tx_buf)[3] << 8;
+				address |= ((u8 *)t->tx_buf)[4];
+			}
+		}else if (count == 1){
+                       len[1] = t->len;
+                       lanes[1] = 1;
+               
+                        if (t->tx_buf)
+                                data_tx_buf = (u8 *)t->tx_buf;
+                }
+		count ++;
+	}
+	
+	ctc_qspi->qspi_mode = PP_MODE;
+	ctc_select_qspi_mode(ctc_qspi, ctc_qspi->qspi_mode);
+	ctc_qspi_pp_ctrl(ctc_qspi);
+
+	/* Fill buffer */
+	offset =0;
+	ctc_qspi->tx_entry = 0;
+	ctc_fill_pp_buf(ctc_qspi, &offset, data_tx_buf, len[1]);
+
+	/* PP CMD */
+	ctc_reg_write_mask(ctc_qspi, PP_CMD_CODE,  SPINOR_OP_PP, 0xffffffff);
+	pp_conf = ctc_pp_conf(lanes[0], 1);
+	ctc_reg_write_mask(ctc_qspi, PP_CMD_CONF,  pp_conf, 0xffffffff);
+
+	/* PP ADDR */
+	ctc_reg_write_mask(ctc_qspi, PP_ADDR_CODE, address, 0xffffffff);
+	pp_conf = ctc_pp_conf(lanes[0], len[0] - 1);
+	ctc_reg_write_mask(ctc_qspi, PP_ADDR_CONF, pp_conf, 0xffffffff);
+
+	/* PP DUMMY */
+	ctc_reg_write_mask(ctc_qspi, PP_DUMMY_CODE, 0x00000000, 0xffffffff);
+	ctc_reg_write_mask(ctc_qspi, PP_DUMMY_CONF, 0x00000000, 0xffffffff);	
+
+	/* PP DATA */
+	pp_conf = ctc_pp_conf(lanes[1], len[1]);
+	ctc_reg_write_mask(ctc_qspi, PP_DATA_CONF,pp_conf, 0xffffffff);
+
+	/* PP GO */
+	ctc_reg_write_mask(ctc_qspi, PP_GO, 0x01, 0xffffffff);
+	while(ctc_reg_read(ctc_qspi, PP_GO, &temp) & 0x1){
+    		if(timeout++ > TIMEOUT_COUNT)
+               	break;
+            	udelay(1);
+        }
+
+	msg_len = len[0] + len[1];
+	return msg_len;
+}
+
+static int ctc_transfer_for_PIO_read(struct ctc_qspi *ctc_qspi, struct spi_message *msg)
+{
+	struct spi_transfer * t;
+	u32 count;
+	u8   lanes[2] = {0};
+	u32	len[2] = {0};
+	u8 * data_rx_buf = NULL;
+	u8 * cmd_tx_buf = NULL;
+	u32 timeout = 0;
+	u32 temp;
+	u16 msg_len;
+	u16 offest;
+	
+	count = 0;
+	list_for_each_entry(t, &msg->transfers, transfer_list){
+		if((count == 0) && (t->tx_buf)){
+			len[0] = t->len;
+			lanes[0] =1;
+			cmd_tx_buf = (u8 *)t->tx_buf;
+		}else if(count == 1){
+			len[1] = t->len;
+			
+			if (t->rx_buf){
+				data_rx_buf = (u8 *)t->rx_buf;
+				
+				if (t->rx_nbits)
+					lanes[1] = t->rx_nbits;
+				else
+					lanes[1] = 1;
+			}
+		}
+		count ++;
+	}
+
+	if( (len[0] + len[1] )> CTC_QSPI_RX_BUFFER_SIZE){
+		len[1] = CTC_QSPI_RX_BUFFER_SIZE - len[0];
+	}	
+	msg_len = len[0] + len[1];
+	offest = msg_len -1;
+	ctc_qspi->qspi_mode = PIO_MODE1;
+	ctc_select_qspi_mode(ctc_qspi, ctc_qspi->qspi_mode);
+	ctc_qspi_pio_ctrl(ctc_qspi);
+
+	ctc_qspi->tx_entry = 0;	
+	ctc_fill_tx_buf(ctc_qspi, &offest, cmd_tx_buf, len[0]);
+	ctc_fill_tx_buf(ctc_qspi, &offest, data_rx_buf, len[1]);
+	
+	ctc_stepx_conf_init(ctc_qspi);
+	ctc_stepx_conf(ctc_qspi, lanes[0], len[0]);
+	ctc_stepx_conf(ctc_qspi, lanes[1], len[1]);
+
+	ctc_reg_write_mask(ctc_qspi, PIO_GO(ctc_qspi->qspi_mode), 0x1, 0xffffffff);
+	while(ctc_reg_read(ctc_qspi, PIO_GO(ctc_qspi->qspi_mode), &temp) & 0x1){
+            	if(timeout++ > TIMEOUT_COUNT)
+	     		break;
+      		udelay(1);
+	}
+	ctc_extra_rx_buf(ctc_qspi, len[1]-1, data_rx_buf, len[1]);
+	return msg_len;
+}
+
+static int ctc_transfer_for_PIO_write(struct ctc_qspi *ctc_qspi, struct spi_message *msg)
+{
+	struct spi_transfer * t;
+	u32 count;
+	u8   lanes[2] = {0};
+	u32	len[2] = {0};
+	u8 * cmd_tx_buf = NULL;
+	u32 timeout = 0;
+	u32 temp;
+	u8 msg_len;
+	u16 offest;
+
+	count = 0;
+	list_for_each_entry(t, &msg->transfers, transfer_list){	
+		if ((count == 0) && (t->tx_buf)){
+			len[0] = t->len;
+			lanes[0] = 1;
+			cmd_tx_buf = (u8 *)t->tx_buf;
+		}
+	}
+	if(len[0] > CTC_QSPI_TX_BUFFER_SIZE){
+		len[0] = CTC_QSPI_TX_BUFFER_SIZE;
+	}
+	msg_len = len[0];
+	offest = msg_len - 1;
+
+	/* PIO write select mode*/
+	ctc_qspi->qspi_mode = PIO_MODE1;
+	ctc_select_qspi_mode(ctc_qspi, ctc_qspi->qspi_mode);
+
+	/* PIO write ctrl*/
+	ctc_qspi_pio_ctrl(ctc_qspi);
+
+	/* PIO write fill buf*/
+	ctc_qspi->tx_entry = 0;
+	ctc_fill_tx_buf(ctc_qspi, &offest, cmd_tx_buf, len[0]);
+
+	/* PIO write step config */
+	ctc_stepx_conf_init(ctc_qspi);
+	ctc_stepx_conf(ctc_qspi, lanes[0], len[0]);
+
+	/* PIO write start transfer */
+	ctc_reg_write_mask(ctc_qspi, PIO_GO(ctc_qspi->qspi_mode), 0x01, 0xffffffff);
+	while(ctc_reg_read(ctc_qspi, PIO_GO(ctc_qspi->qspi_mode), &temp) & 0x1){
+   		if(timeout++ > TIMEOUT_COUNT)
+	      		break;
+ 		udelay(1);
+    	}
+
+	return msg_len;
+}
+
+static int ctc_qspi_start_transfer_one(struct spi_master *master, struct spi_message *msg)
+{
+	struct ctc_qspi *ctc_qspi = spi_master_get_devdata(master);
+	struct spi_device *spi = msg->spi;
+	struct spi_transfer * t;
+	u32 count;
+	u32 type_mode = 0;
+	u8 cmd;
+	ctc_qspi->cs_select = (0x1 << spi->chip_select);
+
+	count = 0;
+	list_for_each_entry(t, &msg->transfers, transfer_list){
+		if ((count == 0) && (t->tx_buf)){
+			cmd = ((u8 *)t->tx_buf)[0];
+	
+			if (cmd == SPINOR_OP_PP || cmd == SPINOR_OP_PP_4B){
+				type_mode = TYPE_PP;
+				break;
+			}else
+				type_mode = TYPE_PIO_WRITE;
+							
+		}else if (count == 1){
+			if (t->rx_buf){
+				type_mode = TYPE_PIO_READ;
+				break;				
+			}
+		}	
+		count ++;
+	}
+	
+	if (type_mode == TYPE_PP)
+		msg->actual_length = ctc_transfer_for_PP_mode(ctc_qspi, msg);
+	
+	else if (type_mode == TYPE_PIO_READ)
+		msg->actual_length = ctc_transfer_for_PIO_read(ctc_qspi, msg);
+	
+	else if (type_mode == TYPE_PIO_WRITE)
+		msg->actual_length = ctc_transfer_for_PIO_write(ctc_qspi, msg);
+
+	msg->status = 0;
+	spi_finalize_current_message(master);
+	
+	return 0;
+}
+
+static size_t ctc_spi_max_data_transfer_size(struct spi_device *spi)
+{
+	return CTC_QSPI_TX_BUFFER_SIZE-6;  //max data transfer size = tx buffer size - (cmd - addr -dummy )
+}
+#if 0
+static irqreturn_t ctc_qspi_irq(int irq, void *dev)
+{
+   /* TODO */
+}
+#endif
+static int ctc_qspi_probe(struct platform_device *pdev)
+{   
+	int ret = 0, irq;
+	struct spi_master *master;
+	struct ctc_qspi *ctc_qspi;
+	struct resource *res;
+	struct device_node *np = pdev->dev.of_node;
+	u32 tmp;
+	
+	master = spi_alloc_master(&pdev->dev, sizeof(*ctc_qspi));	
+	if (!master)	
+		return -ENOMEM;
+
+	master->mode_bits = SPI_MODE_3 | SPI_MODE_1 | SPI_TX_DUAL | SPI_RX_DUAL | SPI_TX_QUAD | SPI_RX_QUAD;
+	master->setup = ctc_qspi_setup;
+	master->transfer_one_message = ctc_qspi_start_transfer_one;
+	master->bits_per_word_mask = SPI_BPW_MASK(32) | SPI_BPW_MASK(16) | SPI_BPW_MASK(8);
+	master->max_transfer_size = ctc_spi_max_data_transfer_size;
+	if (!of_property_read_u32(np, "num-cs", &tmp))	
+		master->num_chipselect = tmp;
+	
+	ctc_qspi = spi_master_get_devdata(master);
+	master->dev.of_node = pdev->dev.of_node;
+	platform_set_drvdata(pdev, master);
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	ctc_qspi->regs = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(ctc_qspi->regs)) 
+	{
+		ret = PTR_ERR(ctc_qspi->regs);
+		goto remove_master;
+	}	
+	
+	if (!of_property_read_u32(np, "pclk", &tmp))	
+		ctc_qspi->bus_clk = tmp;
+	if (!of_property_read_u32(np, "idle-cycle", &tmp))	
+		ctc_qspi->idlecycle = tmp;
+	if (!of_property_read_u32(np, "pre-cycle", &tmp))	
+		ctc_qspi->precycle = tmp;
+	if (!of_property_read_u32(np, "post-cycle", &tmp))	
+		ctc_qspi->postcycle = tmp;
+	if (!of_property_read_u32(np, "qspi-mode", &tmp))	
+		ctc_qspi->qspi_mode = tmp;
+
+	irq = platform_get_irq(pdev, 0);
+	if (irq < 0) {
+		dev_err(&pdev->dev, "no irq resource?\n");
+		return irq;
+	}
+
+	ret = devm_spi_register_master(&pdev->dev, master); 
+	if (!ret)
+		return 0;
+	return 0;	
+
+remove_master:
+	spi_master_put(master);
+	
+	return ret;
+}
+
+static int ctc_qspi_remove(struct platform_device *pdev)
+{
+	struct spi_master *master = platform_get_drvdata(pdev);
+
+	spi_unregister_master(master);
+	return 0;
+}
+
+static const struct of_device_id ctc_qspi_match[] = {
+	{
+		.compatible = "ctc, igdaxi001a-qspi",
+	},
+	{},
+};
+MODULE_DEVICE_TABLE(of, ctc_qspi_match);
+
+/* Structure for a device driver */
+static struct platform_driver ctc_qspi_driver = {
+	.driver = {
+		.name = "ctc-qspi",
+		.of_match_table = ctc_qspi_match,
+	},
+	.probe = ctc_qspi_probe,
+	.remove = ctc_qspi_remove,
+};
+
+module_platform_driver(ctc_qspi_driver);
+
+MODULE_AUTHOR("Centec, Inc.");
+MODULE_LICENSE("GPL");
